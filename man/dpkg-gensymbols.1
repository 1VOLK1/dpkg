.\" Author: Raphael Hertzog
.TH dpkg\-gensymbols 1 "2009-06-19" "Debian Project" "dpkg utilities"
.SH NAME
dpkg\-gensymbols \- generate symbols files (shared library dependency information)
.
.SH SYNOPSIS
.B dpkg\-gensymbols
.RI [ options ]
.
.SH DESCRIPTION
.B dpkg\-gensymbols
scans a temporary build tree (debian/tmp by default) looking for libraries
and generate a \fIsymbols\fR file describing them. This file, if
non-empty, is then installed in the DEBIAN subdirectory of the build tree
so that it ends up included in the control information of the package.
.P
When generating those files, it uses as input some symbols files
provided by the maintainer. It looks for the following files (and use the
first that is found):
.IP \(bu 4
debian/\fIpackage\fR.symbols.\fIarch\fR
.IP \(bu 4
debian/symbols.\fIarch\fR
.IP \(bu 4
debian/\fIpackage\fR.symbols
.IP \(bu 4
debian/symbols
.P
The main interest of those files is to provide the minimal version
associated to each symbol provided by the libraries. Usually it
corresponds to the first version of that package that provided the symbol,
but it can be manually incremented by the maintainer if the ABI of the
symbol is extended without breaking backwards compatibility. It's the
responsibility of the maintainer to keep those files up-to-date and
accurate, but \fBdpkg\-gensymbols\fR helps him.
.P
When the generated symbols files differ from the maintainer supplied
one, \fBdpkg\-gensymbols\fR will print a diff between the two versions.
Furthermore if the difference are too significant, it will even fail (you
can customize how much difference you can tolerate, see the \fB\-c\fR
option).
.SH MAINTAINING SYMBOLS FILES
The symbols files are really useful only if they reflect the evolution of
the package through several releases. Thus the maintainer has to update
them every time that a new symbol is added so that its associated minimal
version matches reality. To do this properly he can use the diffs contained
in the build logs. In most cases, the diff applies directly to his
debian/\fIpackage\fR.symbols file. That said, further tweaks are usually
needed: it's recommended for example to drop the Debian revision
from the minimal version so that backports with a lower version number
but the same upstream version still satisfy the generated dependencies.
If the Debian revision can't be dropped because the symbol really got
added by the Debian specific change, then one should suffix the version
with "~".
.P
Before applying any patch to the symbols file, the maintainer should
double-check that it's sane. Public symbols are not supposed to disappear,
so the patch should ideally only add new lines.
.SS Using #PACKAGE# substitution
.P
In some rare cases, the name of the library varies between architectures.
To avoid hardcoding the name of the package in the symbols file, you can
use the marker \fI#PACKAGE#\fR. It will be replaced by the real package
name during installation of the symbols files. Contrary to the
\fI#MINVER#\fR marker, \fI#PACKAGE#\fR will never appear in a symbols file
inside a binary package.
.SS Using symbol tags
.P
Symbol tagging is useful for marking symbols that are special in some way.  Any
symbol can have arbitrary number of tags associated with it. While all tags are
parsed and stored, only a couple of them are understood by
\fBdpkg-gensymbols\fR and trigger special handling of the symbols. See
subsection \fBStandard symbol tags\fR for reference of these tags.
.P
Tag specification comes right before the symbol name (no whitespace is allowed
in between). It always starts with an opening bracket \fB(\fR, ends with a
closing bracket \fB)\fR and must contain at least one tag. Multiple tags are
separated by the \fB|\fR character. Each tag can optionally have a value which
is separated form the tag name by the \fB=\fR character. Tag names and values
can be arbitrary strings except they cannot contain any of the special \fB)\fR
\fB|\fR \fB=\fR characters. Symbol names following a tag specification can
optionally be quoted with either \fB'\fR or \fB"\fR characters to allow
whitespaces in them. However, if there are no tags specified for the symbol,
quotes are treated as part of the symbol name which continues up until the
first space.
.P
 (tag1=i am marked|tag name with space)"tagged quoted symbol"@Base 1.0
 (optional)tagged_unquoted_symbol@Base 1.0 1
 untagged_symbol@Base 1.0
.P
The first symbol in the example is named \fItagged quoted symbol\fR and has two
tags: \fItag1\fR with value \fIi am marked\fR and \fItag name with space\fR
that is valueless. Then second symbol named \fItagged_unquoted_symbol\fR is
tagged with the only valueless tag named \fIoptional\fR. The last symbol is an
example of the normal untagged symbol.
.P
Since symbol tags are an extension to the \fIdeb-symbols(5)\fR format, they can
only be part of the symbol file template. When \fBdpkg-gensymbols\fR writes a
symbol file in \fIdeb-symbols(5)\fR compatible non-template mode (default), it
fully processes symbols according to the requirements of their standard tags
and strips all tags from the output. On the contrary, in template mode all
symbols and their tags (both standard and unknown ones) are written in their
orignal form as they were loaded.
.SS Standard symbol tags
.TP
.B optional
A symbol marked as optional can disappear from the library at any time and that
will never cause \fBdpkg-gensymbols\fR to fail. However, disappeared optional
symbols will continuously appear as MISSING in the diff in each new package
revision.  This behaviour serves as a reminder for the maintainer that such a
symbol needs to be removed from the symbol file or readded to the library. When
the optional symbol, which was previously declared as MISSING, suddently
reappears in the next revision, it will be upgraded back to the "existing"
status with its minimum version unchanged.

This tag is useful for symbols which are private or their disappearance does
not cause ABI breakage. For example, most of C++ template instantiations fall
into this category. Like any other tag, this one may also have an arbitrary
value which could indicate why the symbol is considered optional.
.TP
.B arch=\fIarchitecture list\fR
This tag allows to mark a symbol as arch-specific. When matching the symbol
file against the library, all arch-specific symbols which do not concern
current host architecture are treated like they do not exist. If an
arch-specific symbol disappears from the arch it is concerned about, normal
procedures for missing symbols apply and it may cause \fBdpkg-gensymbols\fR to
fail. On the other hand, if the arch-specific symbol is found on the arch that
it is not supposed to appear on, it is made arch neutral (i.e. the arch tag is
dropped which triggers the symbol to appear in the diff), but it is not
considered as new.

When operating in non-templace mode, only symbols concerned for the current
host architecture are written to the symbol file. On the contrary, all
arch-specific symbols (including those from foreign arches) are always written
to the symbol file template.

\fIarchitecture list\fR format is the same as the one used in the
\fIBuild-Depends\fR field of \fIdebian/control\fR (excluding enclosing []
brackets). For example, the first symbol from the list below will be considered
only on alpha, amd64 and ia64 architectures while the second one anywhere but
armel.

 (arch=alpha amd64 ia64)a_64bit_specific_symbol@Base 1.0
 (arch=!armel)symbol_armel_does_not_have@Base 1.0
.SS Using includes
.P 
When the set of exported symbols differ between architectures, it may become
inefficient to use a single symbol file. In those cases, an include directive
may prove to be useful in a couple of ways:
.IP \(bu
You can factorize the common part in some external file
and include that file in your \fIpackage\fR.symbols.\fIarch\fR file by
using an include directive like this:

#include "\fIpackages\fR.symbols.common"
.IP \(bu
The include directive may also be tagged like any symbol:

(tag|..|tagN)#include "file_to_include"

As a result, all symbols included from \fIfile_to_include\fR will be considered
to be tagged with \fItag\fR .. \fItagN\fR by default. You can use this feature
to create a common \fIpackage\fR.symbols file which includes architecture
specific symbol files:

  common_symbol1@Base 1.0
 (arch=amd64 ia64 alpha)#include "package.symbols.64bit"
 (arch=!amd64 !ia64 !alpha)#include "package.symbols.32bit"
  common_symbol2@Base 1.0
.P
The symbols files are read line by line, and include directives are processed
as soon as they are encountered. This means that the content of the included
file can override any content that appeared before the include directive and
that any content after the directive can override anything contained in the
included file. Any symbol (or even another #include directive) in the included
file can specify additional tags or override values of the inherited tags in
its tag specification. However, there is no way for the symbol to untag itself
from the inherited tags.
.P
An included file can repeat the header line containing the SONAME of the
library. In that case, it overrides any header line previously read.
However, in general it's best to avoid duplicating header lines. One way
to do it is the following:
.PP
#include "libsomething1.symbols.common"
 arch_specific_symbol@Base 1.0
.SS Using wildcards with versioned symbols
.P
Well maintained libraries have versioned symbols where each version
corresponds to the upstream version where the symbol got added. If that's
the case, it's possible to write a symbols file with wildcard entries like
"*@GLIBC_2.0" that would match any symbol associated to the version
GLIBC_2.0. It's still possible to include specific symbols in the file,
they'll take precedence over any matching wildcard entry. An example:
.PP
libc.so.6 libc6 #MINVER#
 *@GLIBC_2.0 2.0
 [...]
 *@GLIBC_2.7 2.7
 access@GLIBC_2.0 2.2
.P
The symbol access@GLIBC_2.0 will lead to a minimal dependency on libc6
version 2.2 despite the wildcard entry *@GLIBC_2.0 which associates
symbols versioned as GLIBC_2.0 with the minimal version 2.0.
.P
Note that using wildcards means that \fBdpkg\-gensymbols\fR can't check
for symbols that might have disappeared and can't generate a diff between
the maintainer-supplied symbols file and the generated one in the binary
package.
.SS Good library management
.P
A well-maintained library has the following features:
.IP \(bu 4
its API is stable (public symbols are never dropped, only new public
symbols are added) and changes in incompatible ways only when the SONAME
changes;
.IP \(bu 4
ideally, it uses symbol versioning to achieve ABI stability despite
internal changes and API extension;
.IP \(bu 4
it doesn't export private symbols (such symbols can be tagged optional as
workaround).
.P
While maintaining the symbols file, it's easy to notice appearance and
disappearance of symbols. But it's more difficult to catch incompatible
API and ABI change. Thus the maintainer should read thoroughly the
upstream changelog looking for cases where the rules of good library
management have been broken. If potential problems are discovered,
the upstream author should be notified as an upstream fix is always better
than a Debian specific work-around.
.SH OPTIONS
.TP
.BI \-P package-build-dir
Scan \fIpackage-build-dir\fR instead of debian/tmp.
.TP
.BI \-p package
Define the package name. Required if more than one binary package is listed in
debian/control (or if there's no debian/control file).
.TP
.BI \-v version
Define the package version. Defaults to the version extracted from
debian/changelog. Required if called outside of a source package tree.
.TP
.BI \-e library-file
Only analyze libraries explicitly listed instead of finding all public
libraries. You can use a regular expression in \fIlibrary-file\fR to match
multiple libraries with a single argument (otherwise you need multiple
\fB\-e\fR).
.TP
.BI \-I filename
Use \fIfilename\fR as reference file to generate the symbols file
that is integrated in the package itself.
.TP
.B \-O
Print the generated symbols file to standard output, rather than being
stored in the package build tree.
.TP 
.BI \-O filename
Store the generated symbols file as \fIfilename\fR. If \fIfilename\fR is
pre-existing, its content is used as basis for the generated symbols file.
You can use this feature to update a symbols file so that it matches a
newer upstream version of your library.
.TP
.BI \-t
Write the symbol file in template mode rather than the format compatible with
\fIdeb-symbols(5)\fR.The main difference is that in the template mode symbol
names and tags are written in their original form contrary to the
post-processed symbol names with tags stripped in the compatibility mode.
Moreover, some symbols might be omitted when writing a standard
\fIdeb-symbols(5)\fR file (according to the tag processing rules) while all
symbols are always written to the symbol file template.
.TP
.BI \-c [0-4]
Define the checks to do when comparing the generated symbols file
with the file used as starting point. By default the level is 1.
Increasing levels do more checks and include all checks of lower levels.
Level 0 disables all checks. Level 1 fails if some symbols have
disappeared. Level 2 fails if some new symbols have been introduced.
Level 3 fails if some libraries have disappeared. Level 4 fails if some
libraries have been introduced.

This value can be overridden by the environment variable
DPKG_GENSYMBOLS_CHECK_LEVEL.
.TP
.BI \-d
Enable debug mode. Numerous messages are displayed to explain what 
.B dpkg\-gensymbols
does.
.TP
.BR \-h ", " \-\-help
Show the usage message and exit.
.TP
.BR \-\-version
Show the version and exit.
.
.SH "SEE ALSO"
.BR http://people.redhat.com/drepper/symbol-versioning
.br
.BR http://people.redhat.com/drepper/goodpractice.pdf
.br
.BR http://people.redhat.com/drepper/dsohowto.pdf
.br
.BR deb\-symbols (5),
.BR dpkg\-shlibdeps (1).
.
.SH AUTHORS
Copyright \(co 2007-2009 Rapha\[:e]l Hertzog
.sp
This is free software; see the GNU General Public Licence version 2 or later
for copying conditions. There is NO WARRANTY.
